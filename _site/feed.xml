<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-25T09:43:36+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">stufro</title><subtitle>I&apos;m Stuart Frost, a software developer.</subtitle><entry><title type="html">Ruby, OCI8 and an M1 Mac</title><link href="http://localhost:4000/2023/03/24/mac-m1-oracle-instant-client.html" rel="alternate" type="text/html" title="Ruby, OCI8 and an M1 Mac" /><published>2023-03-24T00:00:00+00:00</published><updated>2023-03-24T00:00:00+00:00</updated><id>http://localhost:4000/2023/03/24/mac-m1-oracle-instant-client</id><content type="html" xml:base="http://localhost:4000/2023/03/24/mac-m1-oracle-instant-client.html"><![CDATA[<p>This guide you through compiling a version of Ruby in Intel architecture
(x86_64) instead of the new default Apple architecture (arm64). This is
only required when using gems such as
<a href="https://www.rubydoc.info/gems/ruby-oci8/file/docs/install-on-osx.md">ruby-oci8</a>
because there is not yet a version of Oracle Instant Client which is
compatible with arm64 architecture.</p>

<h2 id="step-1---install-rosetta">Step 1 - install Rosetta</h2>

<p>Install Rosetta2, which translates Intel code to ARM (M1).</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/sbin/softwareupdate --install-rosetta --agree-to-license
</code></pre></div></div>

<h2 id="step-2---check-current-brew-installation">Step 2 - check current brew installation</h2>

<p>First check whether your Brew is installed in arm64 or x86_64
architecture. By default it is likely to be arm64.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>which brew
# arm64 location: /opt/homebrew/bin/brew
# x86_64 location: /usr/local/Homebrew/bin/brew
</code></pre></div></div>

<p>If your brew is installed in the x86_64 location skip to step 4,
otherwise carry on.</p>

<h2 id="step-3---install-intel-compiled-brew">Step 3 - install Intel compiled Brew</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>arch --x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
</code></pre></div></div>

<p>For ease of use, it’s wise to setup an alias so you can differentiate
between using arm64 brew and x86_64 brew. Add the following to your
.zshrc or relevant terminal config. I decided to call mine ibrew short
for Intel Brew. You can call it something else if you want.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>alias ibrew='arch --x86_64 /usr/local/Homebrew/bin/brew'
</code></pre></div></div>

<h2 id="step-4---install-intel-compiled-versions-of-key-dependencies">Step 4 - install Intel compiled versions of key dependencies</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># check xcode, should yield : /Library/Developer/CommandLineTools
xcode-select -p

# check xcode, should yield : xcode-select version 2384
xcode-select -v

# install xcode-select if not installed
xcode-select --install

# install key dependencies for compiling Ruby
ibrew install openssl readline libyaml zlib bison bison@2.7

# if you're likely to use the pg, mysql gems (if you're working on NOC tools for example) install these additional packages
ibrew install libpq mysql
</code></pre></div></div>

<h2 id="step-5---install-intel-compiled-ruby-version">Step 5 - install Intel compiled Ruby version</h2>

<p>Set these environment variables before installing Ruby to tell it where
the key dependencies are installed.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export PATH="$(ibrew --prefix bison@2.7)/bin:$PATH"
export CFLAGS="-Wno-error=implicit-function-declaration"
export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(ibrew --prefix openssl@1.1) --with-readline-dir=$(ibrew --prefix readline) --with-libyaml-dir=$(ibrew --prefix libyaml) --with-zlib-dir=$(ibrew --prefix zlib)"
</code></pre></div></div>

<p>Choose one of the below, which ever is your Ruby version manager of
choice:</p>

<h3 id="asdf">asdf</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>arch -x86_64 asdf install ruby &lt;ruby_version_of_project&gt;
</code></pre></div></div>

<h3 id="rbenv">rbenv</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>arch -x86_64 rbenv install &lt;ruby_version_of_project&gt;
</code></pre></div></div>

<h1 id="troubleshooting">Troubleshooting</h1>

<h2 id="ruby-wont-install">Ruby won’t install</h2>

<p>First try to run the install again, sometimes it installs correctly on
the second attempt. If the retry does not work:</p>

<p>After an update to xcode on 4th November, I could no longer install any
Ruby version. Following <a href="https://bugs.ruby-lang.org/issues/18912">this
guidance</a>, I had to downgrade
xcode to version 13 for it to work.</p>

<h2 id="i-cant-bundle-install">I can’t bundle install</h2>

<h3 id="mysql2">mysql2</h3>

<p>Mysql2 gem is troublesome but the comment and steps
<a href="https://github.com/brianmario/mysql2/issues/1175#issuecomment-891351580">here</a>
seem to allow the gem to build.</p>

<h3 id="pg">pg</h3>

<p>If pg gem fails to install stating missing libraries, try installing the
gem with the pg_config of the Intel installed libpq library.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem install pg -v '&lt;pg_version_of_project&gt;' -- --with-pg-config=/usr/local/opt/libpq/bin/pg_config
</code></pre></div></div>

<h3 id="racecar--rdkafka">racecar / rdkafka</h3>

<p>If the rdkafka gem fails to install, try setting the flags for openssl
and lz4 before installing the gem. To check these paths are correct for
your machine you can run <code class="language-plaintext highlighter-rouge">ibrew --prefix openssl@1.1</code> and
<code class="language-plaintext highlighter-rouge">ibrew --prefix lz4</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export LDFLAGS="-L/usr/local/opt/openssl@1.1/lib -L/usr/local/opt/lz4/lib"
export CPPFLAGS="-I/usr/local/opt/openssl@1.1/include"
export PKG_CONFIG_PATH="/usr/local/opt/openssl@1.1/lib/pkgconfig"

gem install rdkafka
</code></pre></div></div>

<h2 id="can-i-just-reinstall-rbenvruby-in-rosetta-mode-instead-of-going-all-the-way-back-to-brew">Can I just reinstall rbenv/ruby in Rosetta mode instead of going all the way back to Brew?</h2>

<p>We didn’t attempt this in the fear of mixing packages and the
architectures they were installed under. Though, feel free to try and
report back your findings.</p>

<p><strong>Update November 2022:</strong> This doesn’t seem possible, you need an intel
version of Brew installed so that you can install intel versions of key
Ruby dependencies such as readline and openssl.</p>]]></content><author><name>Stuart Frost</name></author><category term="tutorial" /><category term="m1" /><category term="oci8" /><summary type="html"><![CDATA[This guide you through compiling a version of Ruby in Intel architecture (x86_64) instead of the new default Apple architecture (arm64). This is only required when using gems such as ruby-oci8 because there is not yet a version of Oracle Instant Client which is compatible with arm64 architecture.]]></summary></entry></feed>